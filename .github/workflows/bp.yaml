name: Build and deploy ASP.Net Core app to Azure Web App - bpprojectmaliha
env:
  URI: https://bpprojectmaliha.azurewebsites.net
  AZURE_WEBAPP_PACKAGE_PATH: 'publish'
  AZURE_WEBAPP_NAME: bpprojectmaliha
  AZURE_WEBAPP_NAME_DEV: bpprojectmaliha-dev
on:
  push:
    branches: 
      - main
  pull_request:
    branches: 
      - main

jobs:
  build:                                            # "build" job
    runs-on: ubuntu-latest                         # runner
    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 6.0.x
    - name: Build for Release
      run: dotnet build --configuration Release

    - name: Run unit tests
      run: dotnet test BPUnitTestProject/BPUnitTestProject.csproj --no-restore --collect "Code coverage" -l:trx

    - name: Run SpecFlow tests
      run: dotnet test BDD_Specflow_Test/BDD_Specflow_Test.csproj --no-restore --collect "Code coverage" -l:trx

    - name: Publish
      run: dotnet publish -c Release -o '${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/myapp'
    
    - name: Upload artifact for deployment job
      uses: actions/upload-artifact@v3
      with:
        name: .net-app
        path: '${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/myapp'

  code_analysis:
    name: Build and analyze - SonarCloud
    needs: build
    runs-on: windows-latest
    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'zulu' # Alternative distribution options are available.
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v3
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"MalihaAmin_CA1_CSD" /o:"malihaamin" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
          dotnet build -c Release
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

  dependency_check:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Depcheck
        uses: dependency-check/Dependency-Check_Action@main
        id: Depcheck
        with:
          project: 'BP_Calculator'
          path: '.'
          format: 'HTML'    
          args: >
            --failOnCVSS 8            
          # fail if CVSS score (CVE scoring system) is High >=8
          
      - name: Upload Test results
        uses: actions/upload-artifact@master
        with:
           name: Depcheck report
           path: ${{github.workspace}}/reports

  penetration_test:
      runs-on: ubuntu-latest
      needs: [dependency_check, code_analysis] 
      steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v3
        with:
          name: .net-app
          path: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/myapp

      - name: Pull Docker image for ZAP
        run: docker pull owasp/zap2docker-weekly
      - name: Run baseline scan
        run: docker run -v /report:/zap/wrk/:rw --user root -t owasp/zap2docker-weekly zap-baseline.py -t ${{env.URI}} -I -r zapreport.html
  
      - uses: actions/upload-artifact@v2
        name: upload ZAP report
        with:
          name: ZAPreport
          path: /report/zapreport.html
  
  k6_load_test:
    runs-on: ubuntu-latest
    needs: [dependency_check, code_analysis] 
    steps:
    - uses: actions/checkout@v2
    - name: Pull Docker image for k6
      run: docker pull loadimpact/k6

    - name: Run k6 load test, capture report
      run: docker run -i loadimpact/k6 run - <k6test.js > k6report.txt

    - uses: actions/upload-artifact@v2
      with:
        name: k6report
        path: k6report.txt 
   
  deploy_blue:
    runs-on: ubuntu-latest
    needs: k6_load_test
    steps:
    - name: Download artifact from build job
      uses: actions/download-artifact@v3
      with:
        name: .net-app
        path: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/myapp
    - name: Deploy to Azure WebApp
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME_DEV }}
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE_DEV }}
        package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/myapp
        
        
  test_and_promote_green_deployment:
    runs-on: ubuntu-latest
    needs: deploy_blue
    steps:
    - name: Download artifact from build job
      uses: actions/download-artifact@v3
      with:
        name: .net-app
        path: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/myapp
    - name: Deploy to Azure WebApp
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
        package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/myapp
