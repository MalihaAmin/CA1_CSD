name: Build and deploy ASP.Net Core app to Azure Web App - bpprojectmaliha
env:
  URI: https://bpprojectmaliha.azurewebsites.net
  AZURE_WEBAPP_PACKAGE_PATH: 'publish'
  AZURE_WEBAPP_NAME: bpprojectmaliha
on:
  push:
    branches: 
      - main
  pull_request:
    branches: 
      - main

jobs:
  build:                                            # "build" job
    runs-on: ubuntu-latest                         # runner
    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 6.0.x
    - name: Build for Release
      run: dotnet build --configuration Release

    - name: Run unit tests
      run: dotnet test BPUnitTestProject/BPUnitTestProject.csproj --no-restore --collect "Code coverage" -l:trx

    - name: Run SpecFlow tests
      run: dotnet test BDD_Specflow_Test/BDD_Specflow_Test.csproj --no-restore --collect "Code coverage" -l:trx

    - name: Publish
      run: dotnet publish -c Release -o '${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/myapp'
    
    - name: Upload artifact for deployment job
      uses: actions/upload-artifact@v3
      with:
        name: .net-app
        path: '${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/myapp'

  # sonarcloud:      
  #   name: SonarCloud
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v2
    
  #   - name: Set up dotnet
  #     uses: actions/setup-dotnet@v1
  #     with:
  #       dotnet-version: '6.0.x'

  #   - name: Install dependencies
  #     run: dotnet restore

  #   - name: Sonarqube Begin
  #     run: | 
  #         dotnet tool install --global dotnet-sonarscanner
  #         dotnet sonarscanner begin nner begin /k:"MalihaAmin_CA1_CSD" /o:"malihaamin" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /s:$GITHUB_WORKSPACE/SonarQube.Analysis.xml
  #   - name: Build
  #     run: dotnet build

  #   - name: Test with the dotnet CLI
  #     run: dotnet test --settings coverlet.runsettings --logger:trx
  #     env:
  #         ASPNETCORE_ENVIRONMENT: Development

  #   - name: Sonarqube end
  #     run: dotnet sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
  #     env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  

  dependency_check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Depcheck
        uses: dependency-check/Dependency-Check_Action@main
        id: Depcheck
        with:
          project: 'BP_Calculator'
          path: '.'
          format: 'HTML'    
          args: >
            --failOnCVSS 8            
          # fail if CVSS score (CVE scoring system) is High >=8
          
      - name: Upload Test results
        uses: actions/upload-artifact@master
        with:
           name: Depcheck report
           path: ${{github.workspace}}/reports
   
  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Download artifact from build job
      uses: actions/download-artifact@v3
      with:
        name: .net-app
        path: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/myapp
    - name: Deploy to Azure WebApp
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
        package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/myapp
